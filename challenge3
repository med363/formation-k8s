controlplane ~ ➜  kubectl get no
NAME           STATUS   ROLES           AGE   VERSION
controlplane   Ready    control-plane   78m   v1.27.0
node01         Ready    <none>          77m   v1.27.0

controlplane ~ ➜  kubectl get namespace
NAME              STATUS   AGE
default           Active   78m
kube-node-lease   Active   78m
kube-public       Active   78m
kube-system       Active   78m
(vote namespace)=>
---
# To create a new namespace from the CLI command :- kubectl create namespace vote
---
apiVersion: v1
kind: Namespace
metadata:
     name: vote
---
controlplane ~ ➜  k create namespace vote
namespace/vote created
# kubectl create deployment db-deployment --image=postgres:9.4 --dry-run=client -o yaml -n vote > db-deployment.yaml

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: db-deployment
  name: db-deployment
  namespace: vote
spec:
  replicas: 1
  selector:
    matchLabels:
      app: db-deployment
  template:
    metadata:
      labels:
        app: db-deployment
    spec:
      containers:
      - image: postgres:9.4
        name: postgres
        env:
          - name: POSTGRES_HOST_AUTH_METHOD
            value: trust
        volumeMounts:
          - mountPath: /var/lib/postgresql/data
            name: db-data
      volumes:
        - name: db-data
          emptyDir: {}



---
controlplane ~ ➜  k create -f devops/kubernetes-challenges/challenge-3/db-deployment.yml 
deployment.apps/db-deployment created
---
apiVersion: v1
kind: Service
metadata:
  name: db
  namespace: vote
spec:
   type: ClusterIP
   ports:
     - port: 5432
       targetPort: 5432
   selector:
       app: db-deployment

 ---
controlplane ~ ➜  k create -f devops/kubernetes-challenges/challenge-3/db-service.yml 
service/db created
# kubectl create deployment redis-deployment --image=redis:alpine --dry-run=client -o yaml -n vote > redis-deployment.yaml
# Add emptyDir type volume under the volumes section.

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: redis-deployment
  name: redis-deployment
  namespace: vote
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis-deployment
  template:
    metadata:
      labels:
        app: redis-deployment
    spec:
      containers:
      - image: redis:alpine
        name: redis-deployment
        volumeMounts:
        - mountPath: /data
          name: redis-data
      volumes:
      - name: redis-data
        emptyDir: {}

---
controlplane ~ ➜  k create -f devops/kubernetes-challenges/challenge-3/redis-deployment.yml 
deployment.apps/redis-deployment created
---
---
apiVersion: v1
kind: Service
metadata:
    name: redis
    namespace: vote
spec:
    type: ClusterIP
    ports:
      - port: 6379
        targetPort: 6379
    selector:
      app: redis-deployment

 ---
controlplane ~ ➜  k create -f devops/kubernetes-challenges/challenge-3/redis-service.yml 
service/redis created
---
# kubectl create deployment worker --image=kodekloud/examplevotingapp_worker --dry-run=client -o yaml -n vote > worker.yaml

---
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: worker
  name: worker
  namespace: vote
spec:
  replicas: 1
  selector:
    matchLabels:
      app: worker
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: worker
    spec:
      containers:
      - image: kodekloud/examplevotingapp_worker
        name: examplevotingapp-worker-s7cwx

---

controlplane ~ ➜  k create -f devops/kubernetes-challenges/challenge-3/worker.yml 
deployment.apps/worker created
# kubectl create deployment result-deployment --image=kodekloud/examplevotingapp_result:before --dry-run=client -oyaml -n vote > result-deployment.yaml

---
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: result-deployment
  name: result-deployment
  namespace: vote
spec:
  replicas: 1
  selector:
    matchLabels:
      app: result-deployment
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: result-deployment
    spec:
      containers:
      - image: kodekloud/examplevotingapp_result:before
        name: examplevotingapp-result-shxrp



---
controlplane ~ ➜  k create -f devops/kubernetes-challenges/challenge-3/result-deployment.yml deployment.apps/result-deployment created
---
apiVersion: v1
kind: Service
metadata:
  name: result-service
  namespace: vote
spec:
  type: NodePort
  ports:
    - port: 5001
      targetPort: 80
      nodePort: 31001
  selector:
    app: result-deployment

---

controlplane ~ ➜  k create -f devops/kubernetes-challenges/challenge-3/result-service.yml service/result-service created
# kubectl create deployment vote-deployment --image=kodekloud/examplevotingapp_vote:before -n vote --dry-run=client -o yaml > deploy.yaml

---
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: vote-deployment
  name: vote-deployment
  namespace: vote
spec:
  replicas: 1
  selector:
    matchLabels:
      app: vote-deployment
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: vote-deployment
    spec:
      containers:
      - image: kodekloud/examplevotingapp_vote:before
        name: vote
        resources: {}


---

controlplane ~ ➜  k create -f devops/kubernetes-challenges/challenge-3/vote-deployment.yml 
deployment.apps/vote-deployment created

---
apiVersion: v1
kind: Service
metadata:
   name: vote-service
   namespace: vote
spec:
   type: NodePort
   ports:
    - port: 5000
      targetPort: 80
      nodePort: 31000
   selector:
    app: vote-deployment
---

controlplane ~ ➜  k create -f devops/kubernetes-challenges/challenge-3/vote-service.yml 
service/vote-service created

controlplane ~ ➜  k get all -n vote
NAME                                     READY   STATUS    RESTARTS   AGE
pod/db-deployment-7bfb789f65-48wts       1/1     Running   0          8m28s
pod/redis-deployment-75d4bf6cf6-d895s    1/1     Running   0          7m28s
pod/result-deployment-6f46497b48-pb7bd   1/1     Running   0          110s
pod/vote-deployment-74b6568b4d-qzkwc     1/1     Running   0          49s
pod/worker-78645fb679-q6m5l              1/1     Running   0          2m29s

NAME                     TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)          AGE
service/db               ClusterIP   10.101.222.72   <none>        5432/TCP         8m2s
service/redis            ClusterIP   10.102.99.37    <none>        6379/TCP         7m7s
service/result-service   NodePort    10.97.55.14     <none>        5001:31001/TCP   80s
service/vote-service     NodePort    10.108.165.81   <none>        5000:31000/TCP   19s

NAME                                READY   UP-TO-DATE   AVAILABLE   AGE
deployment.apps/db-deployment       1/1     1            1           8m28s
deployment.apps/redis-deployment    1/1     1            1           7m28s
deployment.apps/result-deployment   1/1     1            1           110s
deployment.apps/vote-deployment     1/1     1            1           49s
deployment.apps/worker              1/1     1            1           2m29s

NAME                                           DESIRED   CURRENT   READY   AGE
replicaset.apps/db-deployment-7bfb789f65       1         1         1       8m28s
replicaset.apps/redis-deployment-75d4bf6cf6    1         1         1       7m28s
replicaset.apps/result-deployment-6f46497b48   1         1         1       110s
replicaset.apps/vote-deployment-74b6568b4d     1         1         1       49s
replicaset.apps/worker-78645fb679              1         1         1       2m29s

      
