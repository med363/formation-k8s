why configmap
Un ConfigMap dans Kubernetes est une ressource qui permet de stocker des données de configuration sous forme de paires clé-valeur, que les applications dans un cluster Kubernetes peuvent utiliser pour personnaliser leur comportement.
controlplane ~ ➜  k get configmap
NAME                      DATA   AGE
kube-root-ca.crt          1      24m
redis-cluster-configmap   2      2m

controlplane ~ ✖ k describe configmap redis-cluster-configmap
Name:         redis-cluster-configmap
Namespace:    default
Labels:       <none>
Annotations:  <none>

Data
====
redis.conf:
----
cluster-enabled yes
cluster-require-full-coverage no
cluster-node-timeout 15000
cluster-config-file /data/nodes.conf
cluster-migration-barrier 1
appendonly yes
protected-mode no
update-node.sh:
----
#!/bin/sh
REDIS_NODES="/data/nodes.conf"
sed -i -e "/myself/ s/[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}/${POD_IP}/" ${REDIS_NODES}
exec "$@"


BinaryData
====

Events:  <none>

controlplane ~ ➜  k get pv
No resources found

controlplane ~ ➜  k get no
NAME           STATUS   ROLES           AGE   VERSION
controlplane   Ready    control-plane   28m   v1.27.0
node01         Ready    <none>          28m   v1.27.0

controlplane ~ ➜  git clone https://gitlab.com/nb-tech-support/devops.git
Cloning into 'devops'...
remote: Enumerating objects: 444, done.
remote: Counting objects: 100% (332/332), done.
remote: Compressing objects: 100% (173/173), done.
remote: Total 444 (delta 157), reused 332 (delta 157), pack-reused 112
Receiving objects: 100% (444/444), 63.24 KiB | 12.65 MiB/s, done.
Resolving deltas: 100% (207/207), done.

---
---
apiVersion: v1
kind: List
items:
  - kind: PersistentVolume
    apiVersion: v1
    metadata:
      name: redis01
    spec:
      accessModes: ["ReadWriteOnce"]
      capacity:
        storage: 1Gi
      hostPath:
        path: /redis01
  - kind: PersistentVolume
    apiVersion: v1
    metadata:
      name: redis02
    spec:
      accessModes: ["ReadWriteOnce"]
      capacity:
        storage: 1Gi
      hostPath:
        path: /redis02
  - kind: PersistentVolume
    apiVersion: v1
    metadata:
      name: redis03
    spec:
      accessModes: ["ReadWriteOnce"]
      capacity:
        storage: 1Gi
      hostPath:
        path: /redis03
  - kind: PersistentVolume
    apiVersion: v1
    metadata:
      name: redis04
    spec:
      accessModes: ["ReadWriteOnce"]
      capacity:
        storage: 1Gi
      hostPath:
        path: /redis04
  - kind: PersistentVolume
    apiVersion: v1
    metadata:
      name: redis05
    spec:
      accessModes: ["ReadWriteOnce"]
      capacity:
        storage: 1Gi
      hostPath:
        path: /redis05
  - kind: PersistentVolume
    apiVersion: v1
    metadata:
      name: redis06
    spec:
      accessModes: ["ReadWriteOnce"]
      capacity:
        storage: 1Gi
      hostPath:
        path: /redis06     

 ---

controlplane ~ ➜  k apply -f devops/kubernetes-challenges/challenge-4/pv-cluster.yaml 
persistentvolume/redis01 created
persistentvolume/redis02 created
persistentvolume/redis03 created
persistentvolume/redis04 created
persistentvolume/redis05 created
persistentvolume/redis06 created
---
apiVersion: v1
kind: Service
metadata:
  name: redis-cluster-service
spec:
  ports:
    - port: 6379
      name: client
      targetPort: 6379
    - port: 16379
      name: gossip
      targetPort: 16379
  selector:
    app: redis-cluster
---

controlplane ~ ➜  k apply -f devops/kubernetes-challenges/challenge-4/redis-cluster-service.yaml 
service/redis-cluster-service created

---
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-cluster
  labels:
    run: redis-cluster
spec:
  serviceName: redis-cluster-service
  replicas: 6
  selector:
    matchLabels:
      app: redis-cluster
  template:
    metadata:
      name: redis-cluster
      labels:
        app: redis-cluster
    spec:
      volumes:
        - name: conf
          configMap:
            name: redis-cluster-configmap
            defaultMode: 0755
      containers:
        - image: redis:5.0.1-alpine
          name: redis
          command:
            - "/conf/update-node.sh"
            - "redis-server"
            - "/conf/redis.conf"
          env:
          - name: POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
                apiVersion: v1
          ports:
            - containerPort: 6379
              name: client
            - name: gossip
              containerPort: 16379
          volumeMounts:
            - name: conf
              mountPath: /conf
              readOnly: false
            - name: data
              mountPath: /data
              readOnly: false
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 1Gi


 ---

controlplane ~ ➜  k apply -f devops/kubernetes-challenges/challenge-4/redis-statefulset.yaml statefulset.apps/redis-cluster created

controlplane ~ ➜  k get all
NAME                  READY   STATUS              RESTARTS   AGE
pod/redis-cluster-0   1/1     Running             0          17s
pod/redis-cluster-1   1/1     Running             0          12s
pod/redis-cluster-2   1/1     Running             0          9s
pod/redis-cluster-3   1/1     Running             0          5s
pod/redis-cluster-4   0/1     ContainerCreating   0          2s

NAME                            TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)              AGE
service/kubernetes              ClusterIP   10.96.0.1        <none>        443/TCP              31m
service/redis-cluster-service   ClusterIP   10.101.230.233   <none>        6379/TCP,16379/TCP   59s

NAME                             READY   AGE
statefulset.apps/redis-cluster   4/6     17s

controlplane ~ ➜  k get pvNAME      CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                          STORAGECLASS   REASON   AGE
redis01   1Gi        RWO            Retain           Bound    default/data-redis-cluster-1                           2m15s
redis02   1Gi        RWO            Retain           Bound    default/data-redis-cluster-0                           2m15s
redis03   1Gi        RWO            Retain           Bound    default/data-redis-cluster-4                           2m15s
redis04   1Gi        RWO            Retain           Bound    default/data-redis-cluster-2                           2m15s
redis05   1Gi        RWO            Retain           Bound    default/data-redis-cluster-3                           2m15s
redis06   1Gi        RWO            Retain           Bound    default/data-redis-cluster-5                           2m14s

controlplane ~ ➜  k get pvc
NAME                   STATUS   VOLUME    CAPACITY   ACCESS MODES   STORAGECLASS   AGE
data-redis-cluster-0   Bound    redis02   1Gi        RWO                           75s
data-redis-cluster-1   Bound    redis01   1Gi        RWO                           70s
data-redis-cluster-2   Bound    redis04   1Gi        RWO                           67s
data-redis-cluster-3   Bound    redis05   1Gi        RWO                           63s
data-redis-cluster-4   Bound    redis03   1Gi        RWO                           60s
data-redis-cluster-5   Bound    redis06   1Gi        RWO                           57s

controlplane ~ ➜  k get pods
NAME              READY   STATUS    RESTARTS   AGE
redis-cluster-0   1/1     Running   0          85s
redis-cluster-1   1/1     Running   0          80s
redis-cluster-2   1/1     Running   0          77s
redis-cluster-3   1/1     Running   0          73s
redis-cluster-4   1/1     Running   0          70s
redis-cluster-5   1/1     Running   0          67s

controlplane ~ ➜  k exec -it redis-cluster-0 --redis-cli cluster info
error: unknown flag: --redis-cli
See 'kubectl exec --help' for usage.

controlplane ~ ✖ k exec -it redis-cluster-0 -- redis-cli cluster info
cluster_state:fail
cluster_slots_assigned:0
cluster_slots_ok:0
cluster_slots_pfail:0
cluster_slots_fail:0
cluster_known_nodes:1
cluster_size:0
cluster_current_epoch:0
cluster_my_epoch:0
cluster_stats_messages_sent:0
cluster_stats_messages_received:0

controlplane ~ ➜  kubectl exec -it redis-cluster-0 -- redis-cli --cluster create --cluster-replicas 1 $(kubectl get pods -l app=redis-cluster -o jsonpath='{range.items[*]}{.status.podIP}:6379 {end}')
>>> Performing hash slots allocation on 6 nodes...
Master[0] -> Slots 0 - 5460
Master[1] -> Slots 5461 - 10922
Master[2] -> Slots 10923 - 16383
Adding replica 10.244.192.4:6379 to 10.244.192.1:6379
Adding replica 10.244.192.5:6379 to 10.244.192.2:6379
Adding replica 10.244.192.6:6379 to 10.244.192.3:6379
M: fc0db323f84ba0c9c072116fca857a6710589ea7 10.244.192.1:6379
   slots:[0-5460] (5461 slots) master
M: b47564aabd8e24645146164d213590e093e4b66f 10.244.192.2:6379
   slots:[5461-10922] (5462 slots) master
M: 423ed91fc6de19f22297fc8555c145a13d406821 10.244.192.3:6379
   slots:[10923-16383] (5461 slots) master
S: 8b15646f7ea0a43b22bc36b34a078c74e15f1a9d 10.244.192.4:6379
   replicates fc0db323f84ba0c9c072116fca857a6710589ea7
S: 08517291e4247d4e175ad04244509f4273312ecb 10.244.192.5:6379
   replicates b47564aabd8e24645146164d213590e093e4b66f
S: 388b30b453aa1fac5bc9eee341a02500963366ad 10.244.192.6:6379
   replicates 423ed91fc6de19f22297fc8555c145a13d406821
Can I set the above configuration? (type 'yes' to accept): yes
>>> Nodes configuration updated
>>> Assign a different config epoch to each node
>>> Sending CLUSTER MEET messages to join the cluster
Waiting for the cluster to join
...
>>> Performing Cluster Check (using node 10.244.192.1:6379)
M: fc0db323f84ba0c9c072116fca857a6710589ea7 10.244.192.1:6379
   slots:[0-5460] (5461 slots) master
   1 additional replica(s)
S: 388b30b453aa1fac5bc9eee341a02500963366ad 10.244.192.6:6379
   slots: (0 slots) slave
   replicates 423ed91fc6de19f22297fc8555c145a13d406821
S: 08517291e4247d4e175ad04244509f4273312ecb 10.244.192.5:6379
   slots: (0 slots) slave
   replicates b47564aabd8e24645146164d213590e093e4b66f
S: 8b15646f7ea0a43b22bc36b34a078c74e15f1a9d 10.244.192.4:6379
   slots: (0 slots) slave
   replicates fc0db323f84ba0c9c072116fca857a6710589ea7
M: b47564aabd8e24645146164d213590e093e4b66f 10.244.192.2:6379
   slots:[5461-10922] (5462 slots) master
   1 additional replica(s)
M: 423ed91fc6de19f22297fc8555c145a13d406821 10.244.192.3:6379
   slots:[10923-16383] (5461 slots) master
   1 additional replica(s)
[OK] All nodes agree about slots configuration.
>>> Check for open slots...
>>> Check slots coverage...
[OK] All 16384 slots covered.

controlplane ~ ➜  k exec -it redis-cluster-0 -- redis-cli cluster infocluster_state:okcluster_slots_assigned:16384
cluster_slots_ok:16384
cluster_slots_pfail:0
cluster_slots_fail:0
cluster_known_nodes:6
cluster_size:3
cluster_current_epoch:6
cluster_my_epoch:1
cluster_stats_messages_ping_sent:35
cluster_stats_messages_pong_sent:39
cluster_stats_messages_sent:74
cluster_stats_messages_ping_received:34
cluster_stats_messages_pong_received:35
cluster_stats_messages_meet_received:5
cluster_stats_messages_received:74
